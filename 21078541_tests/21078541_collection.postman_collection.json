{
	"info": {
		"_postman_id": "241930a7-eace-4f54-b32d-2efa5b913add",
		"name": "Ivan Kostin | Event RESTful API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41275056"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Successful user creation",
									"pm.test(\"Should successfully create a user with valid data\", function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('message', 'User successfully created.');",
									"    pm.expect(responseJson).to.have.property('user');",
									"    ",
									"    const user = responseJson.user;",
									"    pm.expect(user).to.have.property('id');",
									"    pm.expect(user).to.have.property('username');",
									"    pm.expect(user).to.have.property('firstname');",
									"    pm.expect(user).to.have.property('lastname');",
									"    ",
									"    const requestData = JSON.parse(pm.request.body.raw);",
									"    pm.expect(user.username).to.equal(requestData.username);",
									"    pm.expect(user.firstname).to.equal(requestData.firstname);",
									"    pm.expect(user.lastname).to.equal(requestData.lastname);",
									"    ",
									"    pm.environment.set(\"last_created_user_id\", user.id);",
									"});",
									"",
									"// Test 2: User already exists (409 Conflict)",
									"pm.test(\"Should return 409 when username already exists\", function() {",
									"    if (pm.response.code === 409) {",
									"        pm.expect(pm.response.json()).to.have.property('message', 'Username already exists.');",
									"    }",
									"});",
									"",
									"// Test 3: Validation error - Missing required fields",
									"pm.test(\"Should return 422 when required fields are missing\", function() {",
									"    if (pm.response.code === 422) {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('errors');",
									"        pm.expect(responseJson.errors).to.be.an('array');",
									"    }",
									"});",
									"",
									"// Test 4: Validation error - Check specific validation error messages",
									"pm.test(\"Should return specific validation error messages\", function() {",
									"    if (pm.response.code === 422) {",
									"        const responseJson = pm.response.json();",
									"        const requestData = JSON.parse(pm.request.body.raw);",
									"        ",
									"        if (!requestData.username) {",
									"            pm.expect(responseJson.errors.some(error => ",
									"                error.includes('username') && error.includes('required')",
									"            )).to.be.true;",
									"        }",
									"        ",
									"        if (!requestData.firstname) {",
									"            pm.expect(responseJson.errors.some(error => ",
									"                error.includes('firstname') && error.includes('required')",
									"            )).to.be.true;",
									"        }",
									"        ",
									"        if (!requestData.lastname) {",
									"            pm.expect(responseJson.errors.some(error => ",
									"                error.includes('lastname') && error.includes('required')",
									"            )).to.be.true;",
									"        }",
									"    }",
									"});",
									"",
									"// Test 5: Response structure verification",
									"pm.test(\"Response structure should be valid\", function() {",
									"    pm.response.to.be.json;",
									"    const responseJson = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(responseJson).to.have.property('message');",
									"        pm.expect(responseJson).to.have.property('user');",
									"    } else if (pm.response.code === 409) {",
									"        pm.expect(responseJson).to.have.property('message');",
									"    } else if (pm.response.code === 422) {",
									"        pm.expect(responseJson).to.have.property('errors');",
									"    } else if (pm.response.code === 500) {",
									"        pm.expect(responseJson).to.have.property('message', 'An internal server error occurred.');",
									"    }",
									"});",
									"",
									"// Test 6: Response time check",
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Test 7: Content-Type header check",
									"pm.test(\"Content-Type header is application/json\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test 8: Username validation",
									"pm.test(\"Should validate username format\", function() {",
									"    if (pm.response.code === 422) {",
									"        const requestData = JSON.parse(pm.request.body.raw);",
									"        const responseJson = pm.response.json();",
									"        ",
									"        if (requestData.username && (requestData.username.length < 3 || !/^[a-zA-Z0-9]+$/.test(requestData.username))) {",
									"            pm.expect(responseJson.errors.some(error => ",
									"                error.includes('username')",
									"            )).to.be.true;",
									"        }",
									"    }",
									"});",
									"",
									"// Test 9: Name validation",
									"pm.test(\"Should validate name formats\", function() {",
									"    if (pm.response.code === 422) {",
									"        const requestData = JSON.parse(pm.request.body.raw);",
									"        const responseJson = pm.response.json();",
									"        ",
									"        if (requestData.firstname && requestData.firstname.length < 2) {",
									"            pm.expect(responseJson.errors.some(error => ",
									"                error.includes('firstname')",
									"            )).to.be.true;",
									"        }",
									"        ",
									"        if (requestData.lastname && requestData.lastname.length < 2) {",
									"            pm.expect(responseJson.errors.some(error => ",
									"                error.includes('lastname')",
									"            )).to.be.true;",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{TEST_username}}\",\n    \"firstname\": \"{{TEST_firstname}}\",\n    \"lastname\": \"{{TEST_lastname}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}user/create",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Successfully retrieve all users when no eventID is provided",
									"pm.test(\"Should successfully retrieve all users when no eventID specified\", function() {",
									"    if (!pm.request.url.query.has('eventID')) {",
									"        pm.response.to.have.status(200);",
									"        pm.response.to.be.json;",
									"        ",
									"        const users = pm.response.json();",
									"        pm.expect(users).to.be.an('array');",
									"        ",
									"        if (users.length > 0) {",
									"            pm.expect(users[0]).to.have.property('id');",
									"            pm.expect(users[0]).to.have.property('username');",
									"            pm.expect(users[0]).to.have.property('firstname');",
									"            pm.expect(users[0]).to.have.property('lastname');",
									"            ",
									"            pm.expect(users[0]).to.not.have.property('Reservations');",
									"        }",
									"    }",
									"});",
									"",
									"// Test 2: Successfully retrieve users filtered by eventID",
									"pm.test(\"Should successfully retrieve users filtered by eventID\", function() {",
									"    const eventID = pm.request.url.query.get('eventID');",
									"    ",
									"    if (eventID && pm.response.code === 200) {",
									"        pm.response.to.be.json;",
									"        ",
									"        const users = pm.response.json();",
									"        pm.expect(users).to.be.an('array');",
									"        ",
									"        if (users.length > 0) {",
									"            pm.expect(users[0]).to.have.property('id');",
									"            pm.expect(users[0]).to.have.property('username');",
									"            pm.expect(users[0]).to.have.property('firstname');",
									"            pm.expect(users[0]).to.have.property('lastname');",
									"            ",
									"            pm.expect(users[0]).to.have.property('Reservations');",
									"            pm.expect(users[0].Reservations).to.be.an('array');",
									"            ",
									"            users.forEach(user => {",
									"                if (user.Reservations && user.Reservations.length > 0) {",
									"                    pm.expect(user.Reservations[0].eventID.toString()).to.equal(eventID);",
									"                }",
									"            });",
									"        }",
									"    }",
									"});",
									"",
									"// Test 3: Return 404 when no users are found",
									"pm.test(\"Should return 404 when no users are found\", function() {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.json()).to.have.property('message', 'No users found.');",
									"    }",
									"});",
									"",
									"// Test 4: Return 404 when filtering by eventID returns no users",
									"pm.test(\"Should return 404 when filtering by eventID returns no users\", function() {",
									"    const eventID = pm.request.url.query.get('eventID');",
									"    ",
									"    if (eventID && pm.response.code === 404) {",
									"        pm.expect(pm.response.json()).to.have.property('message', 'No users found.');",
									"    }",
									"});",
									"",
									"// Test 5: Return 422 for invalid eventID format",
									"pm.test(\"Should return 422 for invalid eventID format\", function() {",
									"    const eventID = pm.request.url.query.get('eventID');",
									"    ",
									"    if (eventID && isNaN(parseInt(eventID, 10)) && pm.response.code === 422) {",
									"        pm.expect(pm.response.json()).to.have.property('message', 'An error occurred while retrieving users.');",
									"    }",
									"});",
									"",
									"// Test 6: Response structure verification",
									"pm.test(\"Response structure should be valid\", function() {",
									"    pm.response.to.be.json;",
									"    const responseJson = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(responseJson).to.be.an('array');",
									"    } else if (pm.response.code === 404) {",
									"        pm.expect(responseJson).to.have.property('message', 'No users found.');",
									"    } else if (pm.response.code === 422) {",
									"        pm.expect(responseJson).to.have.property('message', 'An error occurred while retrieving users.');",
									"    }",
									"});",
									"",
									"// Test 7: Content-Type header check",
									"pm.test(\"Content-Type header is application/json\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test 8: Response time check",
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Test 9: Check that users are returned with expected fields",
									"pm.test(\"Users should have all expected fields\", function() {",
									"    if (pm.response.code === 200) {",
									"        const users = pm.response.json();",
									"        ",
									"        if (users.length > 0) {",
									"            const requiredFields = ['id', 'username', 'firstname', 'lastname'];",
									"            ",
									"            users.forEach(user => {",
									"                requiredFields.forEach(field => {",
									"                    pm.expect(user).to.have.property(field);",
									"                });",
									"                ",
									"                pm.expect(user.id).to.be.a('number');",
									"                pm.expect(user.username).to.be.a('string');",
									"                pm.expect(user.firstname).to.be.a('string');",
									"                pm.expect(user.lastname).to.be.a('string');",
									"            });",
									"        }",
									"    }",
									"});",
									"",
									"// Test 10: Verify that no sensitive data is exposed",
									"pm.test(\"Users should not contain sensitive data\", function() {",
									"    if (pm.response.code === 200) {",
									"        const users = pm.response.json();",
									"        ",
									"        if (users.length > 0) {",
									"            users.forEach(user => {",
									"                pm.expect(user).to.not.have.property('password');",
									"                pm.expect(user).to.not.have.property('passwordHash');",
									"                pm.expect(user).to.not.have.property('salt');",
									"            });",
									"        }",
									"    }",
									"});",
									"",
									"// Test 11: Check Reservation object structure when filtered by eventID",
									"pm.test(\"Reservations should have correct structure when filtering by eventID\", function() {",
									"    const eventID = pm.request.url.query.get('eventID');",
									"    ",
									"    if (eventID && pm.response.code === 200) {",
									"        const users = pm.response.json();",
									"        ",
									"        if (users.length > 0 && users.some(u => u.Reservations && u.Reservations.length > 0)) {",
									"            users.forEach(user => {",
									"                if (user.Reservations && user.Reservations.length > 0) {",
									"                    const reservation = user.Reservations[0];",
									"                    pm.expect(reservation).to.have.property('id');",
									"                    pm.expect(reservation).to.have.property('eventID');",
									"                    pm.expect(reservation).to.have.property('userID');",
									"                    pm.expect(reservation.userID).to.equal(user.id);",
									"                    pm.expect(reservation.eventID.toString()).to.equal(eventID);",
									"                }",
									"            });",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}user",
							"host": [
								"{{base_url}}user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Successfully retrieve a user by valid ID",
									"pm.test(\"Should successfully retrieve user with valid ID\", function() {",
									"    if (pm.response.code === 200) {",
									"        pm.response.to.be.json;",
									"        ",
									"        const user = pm.response.json();",
									"        ",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('username');",
									"        pm.expect(user).to.have.property('firstname');",
									"        pm.expect(user).to.have.property('lastname');",
									"        ",
									"        const requestedId = pm.request.url.path[pm.request.url.path.length - 1];",
									"        pm.expect(user.id.toString()).to.equal(requestedId);",
									"    }",
									"});",
									"",
									"// Test 2: Return 404 when user is not found",
									"pm.test(\"Should return 404 when user is not found\", function() {",
									"    if (pm.response.code === 404) {",
									"        pm.response.to.be.json;",
									"        pm.expect(pm.response.json()).to.have.property('message', 'User not found.');",
									"    }",
									"});",
									"",
									"// Test 3: Return 422 for invalid ID format (non-numeric)",
									"pm.test(\"Should return 422 for invalid ID format\", function() {",
									"    if (pm.response.code === 422) {",
									"        pm.response.to.be.json;",
									"        pm.expect(pm.response.json()).to.have.property('message', 'Invalid ID provided.');",
									"    }",
									"});",
									"",
									"// Test 4: Return 422 for missing ID",
									"pm.test(\"Should return 422 for missing ID\", function() {",
									"    const pathParts = pm.request.url.path;",
									"    const lastPathPart = pathParts[pathParts.length - 1];",
									"    ",
									"    if (lastPathPart === '' || lastPathPart === 'users') {",
									"        pm.expect(pm.response.code).to.equal(422);",
									"        pm.expect(pm.response.json()).to.have.property('message', 'Invalid ID provided.');",
									"    }",
									"});",
									"",
									"// Test 5: Response structure verification",
									"pm.test(\"Response structure should be valid\", function() {",
									"    pm.response.to.be.json;",
									"    const responseJson = pm.response.json();",
									"    ",
									"    if (pm.response.code === 200) {",
									"        pm.expect(responseJson).to.be.an('object');",
									"        pm.expect(responseJson).to.have.property('id');",
									"        pm.expect(responseJson).to.have.property('username');",
									"        pm.expect(responseJson).to.have.property('firstname');",
									"        pm.expect(responseJson).to.have.property('lastname');",
									"    } else if (pm.response.code === 404) {",
									"        pm.expect(responseJson).to.have.property('message', 'User not found.');",
									"    } else if (pm.response.code === 422) {",
									"        pm.expect(responseJson).to.have.property('message', 'Invalid ID provided.');",
									"    } else if (pm.response.code === 500) {",
									"        pm.expect(responseJson).to.have.property('message', 'An internal server error occurred.');",
									"    }",
									"});",
									"",
									"// Test 6: Content-Type header check",
									"pm.test(\"Content-Type header is application/json\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test 7: Response time check",
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"// Test 8: Check data types of user properties",
									"pm.test(\"User properties have correct data types\", function() {",
									"    if (pm.response.code === 200) {",
									"        const user = pm.response.json();",
									"        ",
									"        pm.expect(user.id).to.be.a('number');",
									"        pm.expect(user.username).to.be.a('string');",
									"        pm.expect(user.firstname).to.be.a('string');",
									"        pm.expect(user.lastname).to.be.a('string');",
									"        ",
									"        if (user.createdAt) {",
									"            pm.expect(Date.parse(user.createdAt)).to.be.a('number');",
									"        }",
									"        ",
									"        if (user.updatedAt) {",
									"            pm.expect(Date.parse(user.updatedAt)).to.be.a('number');",
									"        }",
									"    }",
									"});",
									"",
									"// Test 9: Verify that no sensitive data is exposed",
									"pm.test(\"User data should not contain sensitive information\", function() {",
									"    if (pm.response.code === 200) {",
									"        const user = pm.response.json();",
									"        ",
									"        pm.expect(user).to.not.have.property('password');",
									"        pm.expect(user).to.not.have.property('passwordHash');",
									"        pm.expect(user).to.not.have.property('salt');",
									"        pm.expect(user).to.not.have.property('secretQuestion');",
									"        pm.expect(user).to.not.have.property('secretAnswer');",
									"    }",
									"});",
									"",
									"// Test 10: Edge case - ID with leading zeros",
									"pm.test(\"Should handle IDs with leading zeros correctly\", function() {",
									"    const pathParts = pm.request.url.path;",
									"    const lastPathPart = pathParts[pathParts.length - 1];",
									"    ",
									"    if (lastPathPart.match(/^0+\\d+$/)) {",
									"        if (pm.response.code === 200) {",
									"            const user = pm.response.json();",
									"            const expectedId = parseInt(lastPathPart, 10);",
									"            pm.expect(user.id).to.equal(expectedId);",
									"        }",
									"    }",
									"});",
									"",
									"// Test 11: Custom error handler is working",
									"pm.test(\"Custom error handler is working properly\", function() {",
									"    if (pm.response.code >= 400) {",
									"        pm.response.to.be.json;",
									"        pm.expect(pm.response.json()).to.have.property('message');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}user/{{TEST_userID}}",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"{{TEST_userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/users/delete?id=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": {{TEST_userID}},\n\"username\": \"{{TEST_username}}2\",\n\"firstname\": \"{{TEST_firstname}}2\",\n\"lastname\": \"{{TEST_lastname}}2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}user/update",
							"host": [
								"{{base_url}}user"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizers",
			"item": [
				{
					"name": "Create organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{TEST_organizerName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}organizer/create",
							"host": [
								"{{base_url}}organizer"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete organizer",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/organizer/delete?id=90",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"organizer",
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "90"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List organizers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}organizer",
							"host": [
								"{{base_url}}organizer"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Event types",
			"item": [
				{
					"name": "Create Event type",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"${{TEST_eventTypeName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}event-type/create",
							"host": [
								"{{base_url}}event-type"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Event types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}event-type",
							"host": [
								"{{base_url}}event-type"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete event type",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}event-type/delete/{{TEST_eventTypeID}}",
							"host": [
								"{{base_url}}event-type"
							],
							"path": [
								"delete",
								"{{TEST_eventTypeID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "Create event",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventTypeID\": {{TEST_eventTypeID}},\n    \"organizerID\": {{TEST_organizerID}},\n    \"name\": \"{{TEST_eventName}}\",\n    \"price\": {{TEST_eventPrice}},\n    \"dateTime\": {{TEST_eventDateTime}},\n    \"locationLatitude\": {{TEST_eventLatitude}},\n    \"locationLongitude\": {{TEST_eventLongitude}},\n    \"maxParticipants\": {{TEST_eventMaxParticipants}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}event/create",
							"host": [
								"{{base_url}}event"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Get all events (no query parameters)",
									"pm.test(\"Should return 200 OK when getting all events\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"    pm.expect(Array.isArray(pm.response.json())).to.be.true;",
									"});",
									"",
									"// Test 2: Check if response has the right structure",
									"pm.test(\"Events should have the correct structure\", function () {",
									"    const events = pm.response.json();",
									"    ",
									"    if (events.length > 0) {",
									"        const event = events[0];",
									"        pm.expect(event).to.have.property('id');",
									"        pm.expect(event).to.have.property('organizerID');",
									"        pm.expect(event).to.have.property('eventTypeID');",
									"        pm.expect(event).to.have.property('EventType');",
									"        pm.expect(event).to.have.property('Organizer');",
									"    }",
									"});",
									"",
									"// Test 3: Filter by valid organizer ID",
									"pm.test(\"Should filter events by valid organizerID\", function () {",
									"    const events = pm.response.json();",
									"    ",
									"    const organizerID = pm.request.url.query.find(param => param.key === 'organizerID')?.value;",
									"    ",
									"    if (organizerID && events.length > 0) {",
									"        events.forEach(event => {",
									"            pm.expect(event.organizerID.toString()).to.equal(organizerID);",
									"        });",
									"    }",
									"});",
									"",
									"// Test 4: Return 404 for invalid organizer ID",
									"pm.test(\"Should return 404 for non-existent organizerID\", function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.json()).to.have.property('message', 'Organizer not found.');",
									"    }",
									"});",
									"",
									"// Test 5: Filter by valid event type ID",
									"pm.test(\"Should filter events by valid eventTypeID\", function () {",
									"    const events = pm.response.json();",
									"    ",
									"    const eventTypeID = pm.request.url.query.find(param => param.key === 'eventTypeID')?.value;",
									"    ",
									"    if (eventTypeID && events.length > 0 && pm.response.code === 200) {",
									"        events.forEach(event => {",
									"            pm.expect(event.eventTypeID.toString()).to.equal(eventTypeID);",
									"        });",
									"    }",
									"});",
									"",
									"// Test 6: Return 404 for invalid event type ID",
									"pm.test(\"Should return 404 for non-existent eventTypeID\", function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response.json()).to.have.property('message', 'Event type not found.');",
									"    }",
									"});",
									"",
									"// Test 7: Filter by valid dateTime",
									"pm.test(\"Should filter events by dateTime\", function () {",
									"    const events = pm.response.json();",
									"    ",
									"    const dateTimeParam = pm.request.url.query.find(param => param.key === 'dateTime')?.value;",
									"    ",
									"    if (dateTimeParam && events.length > 0 && pm.response.code === 200) {",
									"        const dateTimeFilter = parseInt(dateTimeParam, 10);",
									"        events.forEach(event => {",
									"            pm.expect(event.dateTime).to.be.at.least(dateTimeFilter);",
									"        });",
									"    }",
									"});",
									"",
									"// Test 8: Return 422 for invalid dateTime format",
									"pm.test(\"Should return 422 for invalid dateTime format\", function () {",
									"    if (pm.response.code === 422) {",
									"        pm.expect(pm.response.json()).to.have.property('message', 'Invalid dateTime format.');",
									"    }",
									"});",
									"",
									"// Test 9: Filter by valid userIDs",
									"pm.test(\"Should filter events by userIDs\", function () {",
									"    const events = pm.response.json();",
									"    ",
									"    const userIDsParam = pm.request.url.query.find(param => param.key === 'userIDs')?.value;",
									"    ",
									"    if (userIDsParam && events.length > 0 && pm.response.code === 200) {",
									"        const userIDList = userIDsParam.split(',').map(id => parseInt(id, 10));",
									"        ",
									"        events.forEach(event => {",
									"            if (event.Reservations && event.Reservations.length > 0) {",
									"                const eventUserIDs = event.Reservations.map(r => r.userID);",
									"                const hasMatchingUser = userIDList.some(id => eventUserIDs.includes(id));",
									"                pm.expect(hasMatchingUser).to.be.true;",
									"            }",
									"        });",
									"    }",
									"});",
									"",
									"// Test 10: Return 422 for invalid userIDs format",
									"pm.test(\"Should return 422 for invalid userIDs format\", function () {",
									"    if (pm.response.code === 422) {",
									"        pm.expect(pm.response.json()).to.have.property('message', 'Invalid userIDs format.');",
									"    }",
									"});",
									"",
									"// Test 11: Multiple filter parameters work together",
									"pm.test(\"Should apply multiple filters correctly\", function () {",
									"    const events = pm.response.json();",
									"    ",
									"    const organizerID = pm.request.url.query.find(param => param.key === 'organizerID')?.value;",
									"    const eventTypeID = pm.request.url.query.find(param => param.key === 'eventTypeID')?.value;",
									"    ",
									"    if (organizerID && eventTypeID && events.length > 0 && pm.response.code === 200) {",
									"        events.forEach(event => {",
									"            pm.expect(event.organizerID.toString()).to.equal(organizerID);",
									"            pm.expect(event.eventTypeID.toString()).to.equal(eventTypeID);",
									"        });",
									"    }",
									"});",
									"",
									"// Test 12: Check for proper error handling",
									"pm.test(\"Should have proper error handling structure\", function () {",
									"    if (pm.response.code >= 400) {",
									"        pm.expect(pm.response.json()).to.have.property('message');",
									"    }",
									"});",
									"",
									"// Test 13: Response time should be reasonable",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}event",
							"host": [
								"{{base_url}}event"
							],
							"query": [
								{
									"key": "dateTime",
									"value": null,
									"disabled": true
								},
								{
									"key": "userIDs",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get event",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}event/{{TEST_eventID}}",
							"host": [
								"{{base_url}}event"
							],
							"path": [
								"{{TEST_eventID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete event",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}event/delete/{{TEST_eventID}}",
							"host": [
								"{{base_url}}event"
							],
							"path": [
								"delete",
								"{{TEST_eventID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update event",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{TEST_eventID}},\n    \"eventTypeID\": {{TEST_eventTypeID}},\n    \"organizerID\": {{TEST_organizerID}},\n    \"name\": \"{{TEST_eventName}}2\",\n    \"price\": {{TEST_eventPrice + 1}},\n    \"dateTime\": {{TEST_eventDateTime + 2}},\n    \"locationLatitude\": {{TEST_eventLatitude + 2}},\n    \"locationLongitude\": {{TEST_eventLongitude + 2}},\n    \"maxParticipants\": {{TEST_eventMaxParticipants + 5}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}event/update",
							"host": [
								"{{base_url}}event"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reservation",
			"item": [
				{
					"name": "Create reservation",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventID\": {{TEST_eventID}},\n    \"userID\": {{TEST_userID}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}reservation/create",
							"host": [
								"{{base_url}}reservation"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}reservation/{{TEST_reservationID}}",
							"host": [
								"{{base_url}}reservation"
							],
							"path": [
								"{{TEST_reservationID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete reservation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}reservation/delete/{{TEST_reservationID}}",
							"host": [
								"{{base_url}}reservation"
							],
							"path": [
								"delete",
								"{{TEST_reservationID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all reservations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}reservation",
							"host": [
								"{{base_url}}reservation"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}