<%- include('templates/header') %>


<main class="container mx-auto px-4 py-6">
    <h2 class="text-2xl font-semibold mb-4">Manage Events</h2>

    <h3 class="text-xl font-medium mb-2">Get All Events</h3>
    <form id="getEventsForm" class="mb-6">
        <label for="organizerId" class="block text-gray-700 mb-2">Filter by Organizer ID (optional):</label>
        <input type="number" id="organizerId" name="organizerId" class="border border-gray-300 p-2 rounded w-full mb-4">
        <label for="eventTypeId" class="block text-gray-700 mb-2">Filter by EventType ID (optional):</label>
        <input type="number" id="eventTypeId" name="eventTypeId" class="border border-gray-300 p-2 rounded w-full mb-4">
        <label for="dateTime" class="block text-gray-700 mb-2">Filter by DateTime (optional):</label>
        <input type="number" id="dateTime" name="dateTime" class="border border-gray-300 p-2 rounded w-full mb-4">
        <label for="userIds" class="block text-gray-700 mb-2">Filter by User IDs (optional):</label>
        <input type="number" id="userIds" name="userIds" class="border border-gray-300 p-2 rounded w-full mb-4">
        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Get Events</button>
    </form>
    <div id="eventsOutput" class="bg-gray-100 p-4 rounded shadow mb-6"></div>

    <h3 class="text-xl font-medium mb-2">Delete Event</h3>
    <form id="deleteEventForm" class="mb-6">
        <label for="eventId" class="block text-gray-700 mb-2">Event ID:</label>
        <input type="number" id="eventId" name="eventId" class="border border-gray-300 p-2 rounded w-full mb-4">
        <button type="submit" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">Delete Event</button>
    </form>
    <div id="deleteEventOutput" class="bg-gray-100 p-4 rounded shadow mb-6"></div>

</main>

<script>
    function buildURL(baseURL, params) {
        const url = new URL(baseURL)

        Object.keys(params).forEach(key => {
            if (params[key] !== undefined && params[key] !== null && params[key] !== "") {
                url.searchParams.append(key, params[key])
            }
        })

        return url.toString()
    }

    function epochToDate(epochSeconds) {
        if (!epochSeconds || isNaN(epochSeconds)) return null
        return new Date(epochSeconds * 1000).toISOString()
    }

    const baseURL = 'http://localhost:3000/api/event'

    document.getElementById('getEventsForm').addEventListener('submit', async (e) => {
        e.preventDefault()

        const params = {
            organizerID: document.getElementById('organizerId')?.value,
            eventTypeID: document.getElementById('eventTypeId')?.value,
            dateTime: document.getElementById('dateTime')?.value,
            userIDs: document.getElementById('userIds')?.value
        }
        console.log(document.getElementById('organizerId')?.value)


        const url = buildURL(baseURL, params)

        try {
            const response = await fetch(url)
            const data = await response.json()

            const outputDiv = document.getElementById('eventsOutput')
            if (response.ok) {
                outputDiv.innerHTML = '<h4 class="text-lg font-semibold">Events:</h4>' +
                    '<ul class="list-disc pl-6">' +
                    data.map(org => `<li>ID: ${org.id}, Type: ${org.EventType.name},
Name: <b>${org.name}</b>,
Org: ${org.Organizer.name},
Price: â‚¬${org.price},
Date: ${epochToDate(org.dateTime)},
Location: ${org.locationLongitude + " / " + org.locationLatitude}
</li>`).join('') +
                    '</ul>'
            } else {
                outputDiv.innerHTML = `<p class="text-red-500">Error: ${data.message}</p>`
            }
        } catch (error) {
            console.error('Error fetching organizers:', error)
        }
    })

    document.getElementById('deleteEventForm').addEventListener('submit', async (e) => {
        e.preventDefault()

        const eventId = document.getElementById('eventId').value

        try {
            const response = await fetch(`${baseURL}/delete/${eventId}`, {
                method: 'DELETE'
            })

            const data = await response.json()

            const outputDiv = document.getElementById('deleteEventOutput')
            if (response.ok) {
                outputDiv.innerHTML = `<p class="text-green-500">Event deleted successfully.</p>`
            } else {
                outputDiv.innerHTML = `<p class="text-red-500">Error: ${data.message}</p>`
            }
        } catch (error) {
            console.error('Error deleting event:', error)
        }
    })
</script>
